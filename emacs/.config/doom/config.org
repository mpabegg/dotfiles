* Matheus' Doom Config!
The source code blocks here will be tangled into `init.el`. I think it's easier to have proper comments and headers than having to navigate comments on the actual .el file. :)


** Instructions taken from the example config.el file that ships with Doom
 Whenever you reconfigure a package, make sure to wrap your config in an `after!' block, otherwise Doom's defaults may override your settings.
 E.g.
#+begin_src emacs-lisp :tangle no
;; (after! PACKAGE
;;   (setq x y))
#+end_src

 The exceptions to this rule:

   - Setting file/directory variables (like `org-directory')
   - Setting variables which explicitly tell you to set them before their
     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
   - Setting doom variables (which start with 'doom-' or '+').

 Here are some additional functions/macros that will help you configure Doom.

 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
 - `map!' for binding new keys

 To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
 This will open documentation for it, including demos of how they are used.
 Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

 You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

** User Idendity
 Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp
(setq user-full-name "Matheus Abegg"
      user-mail-address "1006630+mpabegg@users.noreply.github.com")
#+end_src


** Font

 Doom exposes five (optional) variables for controlling fonts in Doom:

 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
 - `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
 - `doom-unicode-font' -- for unicode glyphs
 - `doom-serif-font' -- for the `fixed-pitch-serif' face

 See 'C-h v doom-font' for documentation and more examples of what they accept.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 13 :weight 'semi-bold)
      doom-variable-pitch-font (font-spec :family "Ubuntu Nerd Font" :size 13))
#+end_src


 If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

** Theme

 There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.

 I like to use the base16-eighties theme. This require's that I add the package into my [[./packages.el][package.el]] file.

 #+begin_src emacs-lisp
(setq doom-theme 'base16-eighties)
 #+end_src

** Line Numbers

 This determines the style of line numbers in effect.
 If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

 #+begin_src emacs-lisp
(setq display-line-numbers-type t)
 #+end_src

** Org Directory

 If you use `org' and don't want your org files in the default location below, change `org-directory'.
 It must be set before org loads!
 #+begin_src emacs-lisp
(setq org-directory "~/org/")
 #+end_src

** Save all buffers when they lose focus

I got lazy and never remember to save my files anymore. This hook takes care of that.
Files are saved when the buffer loses focus

#+begin_src emacs-lisp
(add-hook! 'focus-out-hook (save-some-buffers t))
#+end_src

** Select buffer when splitting the window

I'm not sure if I'll keep this or not, but it was interesting to make it work.

This will open a buffer selection list (using `consult-buffer`) after splitting the window. If you quit the selection (<ESC>), the split will be closed.

#+begin_src emacs-lisp
(dolist (command '(evil-window-split
                   evil-window-vsplit))
  (defadvice! choose-buffer-on-split (&rest _)
    "Run #'consult-buffer after splitting windows.

If the user quits the buffer selection, the new windows is closed."
    :after command
    (let ((inhibit-quit t))
      (unless (with-local-quit (consult-buffer) t)
        (+workspace/close-window-or-workspace)))))
#+end_src


** Display Literal links in Org Mode
It's a pain in the ass to edit links when they are shown as descriptive links...
#+begin_src emacs-lisp
(setq org-descriptive-links nil)
#+end_src

** Change alt-leader to C-SPC
I much prefer using ~C-SPC~ instead of ~M-SPC~ becuase I can just use my pinky to hit ~CTRL~ (To which CAPS is mapped).
This will only take effect when on ~insert~ or ~emacs~ mode.

From the varialbe Docs:
#+begin_quote
An alternative leader prefix key, used for Insert and Emacs states, and for
non-evil users.
#+end_quote

~C-SPC~ is bound by DOOM to ~set-mark-command~ on other states.

#+begin_src emacs-lisp
(setq doom-leader-alt-key "C-SPC")
#+end_src
